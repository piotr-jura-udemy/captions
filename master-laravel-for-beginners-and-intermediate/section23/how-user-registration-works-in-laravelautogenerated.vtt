WEBVTT

00:00.970 --> 00:08.170
In the last lecture we started talking about dealt indication inside our application and we generally

00:08.170 --> 00:16.060
talked about the authenticate middleware and how we can use it to protect certain pages that they required

00:16.300 --> 00:23.140
users of our application to first have an account and then be logged in so we can just secure it from

00:23.140 --> 00:25.080
the outside world.

00:25.090 --> 00:28.400
Now let's see another part of this.

00:28.420 --> 00:34.010
What we get generated by this make our command and this is the registration view.

00:34.060 --> 00:41.920
So Lara will create a simple form for us which we can immediately use to let users read register on

00:41.920 --> 00:43.480
our application.

00:43.480 --> 00:46.330
So you can visit it by pressing this register.

00:46.330 --> 00:54.970
And that's the route that was also registered to using this of roots method call and maybe let's try

00:55.060 --> 01:00.100
if we can immediately register in our application.

01:00.100 --> 01:02.320
And will that work.

01:02.320 --> 01:09.430
So let's provide a name via email address and the password and the password confirmation Press Register.

01:10.830 --> 01:16.950
And you can see that we are logged in and this is the actual ID that home page from the home controller

01:17.550 --> 01:22.720
that was replaced that replaced our original controller by Lavell.

01:22.740 --> 01:29.150
And if we go to that view you can see that we see exactly what is inside this room.

01:29.160 --> 01:31.270
So you can see that it is protected.

01:31.950 --> 01:36.390
Now we can see this page because we are logged in.

01:36.390 --> 01:38.580
So that will register.

01:38.580 --> 01:47.280
Controller is doing it's creating an account and it is also logging us in immediately using the session.

01:47.280 --> 01:53.520
So if you will go to the users they will inside P2P may not mean you can see that we already have this

01:53.520 --> 01:59.040
account created with the name I provided that email and the hashed password.

01:59.040 --> 02:06.280
We also have the timestamps so we can see when the user was created or updated.

02:06.290 --> 02:12.740
So now let's close this and see how that actually works from within inside.

02:13.160 --> 02:22.070
So let's go to this resources views folder and here you can see that first there is this layout created

02:22.070 --> 02:31.180
by Lara VO So this is the one you see right now on the page and and Lavell decided to created inside

02:31.180 --> 02:33.180
the layouts folder our own layout.

02:33.210 --> 02:35.880
E here will move back to it in a bit.

02:36.250 --> 02:37.920
And now there is this folder.

02:37.930 --> 02:42.260
So here it created some of the blade views for registering logging in.

02:42.260 --> 02:47.800
And also for verifying the user using email and resetting passports.

02:47.800 --> 02:49.770
We'll get to that later of course.

02:49.780 --> 02:56.380
Now let's see how this simple registration view looks like so you might have noticed that it is just

02:56.380 --> 03:04.060
simply a forum which has the CSIRO see as RF directive for protecting us against the cross site request

03:04.090 --> 03:09.740
forgery and then it has just simple inputs.

03:09.890 --> 03:14.860
The first one is the name.

03:15.050 --> 03:17.120
It also contains checks.

03:17.120 --> 03:23.550
So when this forum is actually sent it will display some validation errors.

03:23.570 --> 03:24.680
If there are any.

03:24.680 --> 03:32.720
So for example you provided an incorrect name or incorrect email the same with the passwords.

03:32.720 --> 03:34.570
So that's a pretty simple form.

03:34.610 --> 03:40.850
We'll do a do this form ourselves to just practice it because of course we can just leave it as it is

03:41.070 --> 03:44.510
the generated view but it will make sense.

03:44.510 --> 03:51.560
We need to learn how to create those forms not just generate stuff and assume that it is good because

03:51.590 --> 03:54.050
it is working now.

03:54.560 --> 04:02.640
So that's the forum and it is being actually sent using our registered controller which was generated

04:02.640 --> 04:04.240
by Lara Vo.

04:04.380 --> 04:08.600
So as you can see there is a normal controller the registered controller.

04:08.610 --> 04:12.230
It extends the base controller from our project.

04:12.510 --> 04:18.420
But how it gets most of this it functionality is by using that rate.

04:18.450 --> 04:24.510
So this is using their registers users trade and only has a couple of methods.

04:24.510 --> 04:31.350
Now you can also see in the constructor of this class that it is applying a middleware.

04:31.350 --> 04:36.150
This time it's called guest which means it doesn't require authentication.

04:36.150 --> 04:42.540
So it makes sense in terms of the registration controller that anyone can access it.

04:42.570 --> 04:48.780
Because well of course if you will require under authentication at this point no one would be able to

04:48.780 --> 04:52.860
register at your page because they would have to have an account first.

04:52.860 --> 04:54.450
So this makes sense.

04:54.600 --> 04:59.700
Now you can see that we have two methods inside our Controller.

04:59.700 --> 05:07.110
First one is that validator which specifies how the data that is being sent to it from the register

05:07.110 --> 05:09.760
form should be validated.

05:09.780 --> 05:15.480
So we talked about the validators before and we created one for the blog post so you should be familiar

05:15.480 --> 05:17.110
with the syntax.

05:17.160 --> 05:20.750
So those are the fields that come from the forum.

05:20.790 --> 05:26.730
So we have name email password and they all have some constraints like they are all required.

05:26.820 --> 05:32.860
They all should be a string and the name for example has the maximum length accepted.

05:33.150 --> 05:39.570
And additionally e-mail has an e-mail constraint so it will verify if it is a valid e-mail.

05:39.840 --> 05:41.120
It should be unique.

05:41.130 --> 05:45.800
So this is a more complicated constraints constrained we'll get to that later.

05:45.810 --> 05:50.110
But what it simply does is unique is the name of the constraint.

05:50.280 --> 05:58.560
And the second parameter parameters can be passed by the way using the semicolon and the unique constraint

05:58.590 --> 06:04.680
is checking whether this email would be unique inside the user's tables.

06:04.710 --> 06:10.470
So this would prevent us from registering to users with the same e-mail.

06:10.500 --> 06:14.870
So as you can read from that it might be obvious at this point or not.

06:15.030 --> 06:25.310
But a lot of it is by default assuming that your user name would be email so users are made unique by

06:25.310 --> 06:26.680
their e-mail.

06:26.690 --> 06:29.550
So of course you can use different fields for that.

06:29.550 --> 06:32.630
We'll get to that later how we can configured that.

06:32.900 --> 06:36.860
And the last part of this validation is the password.

06:36.860 --> 06:42.410
Of course it's required that it has it has to be a string minimum length is six characters.

06:42.530 --> 06:46.880
And also there is additional validator confirmed.

06:46.880 --> 06:54.250
And this comes from the password confirm field which does has to be the same as this password field.

06:54.290 --> 06:57.640
So we will also explain how that works later.

06:57.830 --> 07:00.050
So you can configure that however you want.

07:00.050 --> 07:04.760
So this that means you can create your own rules.

07:04.880 --> 07:10.880
For example it would be a good idea to specify how strong the password should be.

07:10.880 --> 07:18.050
So we can add some custom validators to it to verify that for example it contains alphanumeric characters

07:18.050 --> 07:24.590
some extra symbols and maybe make it a little bit longer so that all depends on of course on your requirements

07:24.620 --> 07:31.710
because sometimes you would like to make stronger passwords and sometimes you just do not need it.

07:31.850 --> 07:35.060
And the last method here is the create method.

07:35.090 --> 07:36.870
So this is pretty simple.

07:36.890 --> 07:41.990
It's just actually creating a new user model and saving it to the database.

07:41.990 --> 07:44.630
So this is what the create method is doing.

07:44.630 --> 07:51.290
It's creating a new model and saving it immediately inside the database and it is doing that on the

07:51.620 --> 07:57.320
data that is first validated and then passed to this create method.

07:57.320 --> 08:04.160
The only exception is of course the password which is you're using the hash class make to create a hash

08:04.370 --> 08:12.140
of the password because we never never ever should store passwords as plain text inside the database

08:12.170 --> 08:18.500
because anyone that would get access to the database will know all the passwords of your users.

08:18.560 --> 08:25.720
And that happens a lot even with the big companies which happen to store passwords as plaintext.

08:25.760 --> 08:29.110
So you should never repeat their mistake.

08:29.240 --> 08:37.820
Now you should also know how the this metals from your controller which you should configure if you

08:37.820 --> 08:40.520
wish of course are actually called.

08:40.550 --> 08:44.050
So this is thanks to that registers users straight.

08:44.060 --> 08:50.990
So let's click on it and see what does it contain.

08:50.990 --> 09:01.410
So here you have for example the show registration form method which happens to be called by one of

09:01.410 --> 09:04.740
the routes which is this register.

09:04.740 --> 09:07.240
So that's actually an action.

09:07.260 --> 09:15.200
And this trade is just used to save you from coding the code that would look pretty similar anyway.

09:15.300 --> 09:18.890
So we don't really have to create that inside your own controller.

09:18.900 --> 09:25.440
It's just from this trade which you can use inside any class and have those methods ready.

09:25.440 --> 09:33.450
So this is simply showing a view with the forum so that's nice from Laura that it created it for us

09:33.780 --> 09:37.050
and then we have this register method.

09:37.050 --> 09:42.270
So the register is also bound to our route and it's for the post through it.

09:42.300 --> 09:49.380
So when you actually send this registration form you can see that here that it is the register method

09:49.410 --> 09:57.240
is bound to sending a post request to the register your URL and this is what it is doing here.

09:57.270 --> 10:05.360
So it is calling the validator method which you have defined here to validate all the incoming data

10:05.450 --> 10:11.160
so request all will fetch all the fields that were sent through the form.

10:11.210 --> 10:15.730
Now we have validate so we validated for any possible errors.

10:15.740 --> 10:21.780
And as you might remember when you are using that value data and there are any errors.

10:21.890 --> 10:22.460
Laura.

10:22.580 --> 10:28.960
A lot of vote by default will redirect back to the last page which would be forum and we'll add old

10:29.030 --> 10:33.100
errors to their session variable called errors.

10:33.140 --> 10:39.860
That's why we can just simply access it inside our reviews and check if it contains an error and if

10:39.860 --> 10:47.290
it is if it does we can display some additional information about the error on the forum.

10:47.330 --> 10:53.380
Now it also is dispatching an event we haven't covered the events at all yet.

10:53.400 --> 11:01.770
We'll do that later so let's ignore it for now but inside it there is a call to this create.

11:02.000 --> 11:08.180
And as you remember and that's our method inside our registered controller that is actually storing

11:08.270 --> 11:10.860
a new instance of the user.

11:11.060 --> 11:18.740
Also mind that to use this create method in specified model attributes as an array.

11:18.900 --> 11:27.210
We have to specify that those fields are fallible inside our user entity and this is how you do it.

11:27.210 --> 11:33.110
We did that before so you should know what I am talking about.

11:34.210 --> 11:38.880
Now let's go back to the straight visual studio code.

11:38.990 --> 11:40.020
Closed it.

11:40.360 --> 11:44.360
Okay I'll open it permanently now.

11:44.830 --> 11:48.820
So at this point where we validate the data and it is correct.

11:48.840 --> 11:56.720
So there isn't a user with this email already inside the database and there is a name correct.

11:56.740 --> 12:04.840
And the password is correct and it is being confirmed then the new user and the new user is being created

12:05.140 --> 12:07.380
inside the database.

12:07.400 --> 12:15.030
And now when that user is created it is using the Guard component which is fed using the health guard.

12:15.040 --> 12:17.470
This actually is fudging the default guard.

12:17.500 --> 12:25.220
But let's just wait for the next lecture when I will explain what the Guard is and how that works.

12:25.330 --> 12:36.460
And then finally it will try to redirect you to the redirect path so redirect path is a part of the

12:36.610 --> 12:38.420
redirect user.

12:38.560 --> 12:39.250
Straight.

12:39.300 --> 12:43.820
And while this might be complicated but let's try to go through it.

12:43.930 --> 12:51.910
So this will work the way that if you would have method defined called redirect to it will call this

12:51.910 --> 12:57.810
method to fetch to where you would like to redirect the users after they register.

12:57.970 --> 13:06.310
Or alternatively if it doesn't have a method it will use a property called redirect to and then redirect

13:06.310 --> 13:10.330
to the URL specified inside this property.

13:10.540 --> 13:17.250
If nothing is specified it will just redirect you by default to the slash hole.

13:17.380 --> 13:22.090
Now this is our property inside the register controller.

13:22.150 --> 13:28.890
I know I am switching between files so if you would like to see that again that's a good idea.

13:28.960 --> 13:30.790
You might just not follow it but.

13:30.910 --> 13:33.760
Well I'm trying to explain as much as possible.

13:34.030 --> 13:37.220
So sorry for switching the files quickly.

13:37.510 --> 13:44.500
So this is this redirect to property we can of course alternatively specify it as a method if we need

13:44.500 --> 13:45.790
some additional logic.

13:45.910 --> 13:53.770
But here you can configure where where your users should be redirected when you register so they should

13:53.770 --> 13:55.440
be redirected to home.

13:55.480 --> 13:56.690
In this case.

13:57.010 --> 14:04.390
So this is what this trait is using which is basically used inside another trait which we talked about

14:04.390 --> 14:08.040
before those registers users.

14:08.110 --> 14:09.820
So that's the final step.

14:09.820 --> 14:17.620
It is redirecting using the redirect function to the path specified.

14:18.160 --> 14:24.190
Now that would be basically eat about how to basically the register controller works.

14:24.190 --> 14:32.290
Of course it's all provided by Lavell so the fingers so you do not really have to use that because as

14:32.290 --> 14:40.980
you've seen what it does is basically invalidates that data that you have sent then creates a user inside

14:40.980 --> 14:49.260
the database and finally tries to log you in and redirect you to the page specified.

14:49.570 --> 14:50.750
So it's just.

14:51.310 --> 14:58.750
I'd say nice additions from LA all that they do not force you to implement it yourself because that

14:58.750 --> 15:03.700
might become cumbersome when you create an application after application and have to repeat all the

15:03.700 --> 15:11.440
steps but just so you know it is doing those three simple steps and you can just write them yourselves.

15:11.440 --> 15:19.360
And that also includes specifying your own actions and your own routes with your own custom names.

15:19.420 --> 15:20.890
And this is the way you would do it.

15:20.940 --> 15:25.650
You can even follow the way Lara Val is doing that.

15:25.660 --> 15:33.700
If you would like to do it yourself but well we'll just stay with what Lara Ivo is proposing us but

15:33.700 --> 15:37.210
just so you know it's all actually very configurable.
