WEBVTT

00:00.660 --> 00:07.590
So far in our blog post application anyone can do anything anyone can edit delete posts or even add

00:07.590 --> 00:08.090
new ones.

00:08.120 --> 00:15.840
So obviously at one point in time you will need some kind of user accounts inside your application.

00:15.840 --> 00:23.130
So let's see how we can easily set that up in Lavell and it is actually extremely easy.

00:23.130 --> 00:25.740
So let's go to the Visual Studio code.

00:25.800 --> 00:32.520
So first thing you might have noticed is that we already had the User model when we created a new application

00:32.530 --> 00:35.330
so it was created with Lara Vo.

00:35.580 --> 00:44.070
Also there is migration already created for the user stable for our user model and also we are covered

00:44.130 --> 00:50.970
in the controllers department as there is an out folder with five controllers which were created when

00:50.970 --> 00:54.500
we just created a new layer of application.

00:54.600 --> 01:03.270
So let's see how we can easily set this up and just start using authentication system inside our larval

01:03.300 --> 01:04.440
application.

01:04.440 --> 01:08.720
Now let's recap what we already have so we have the User model.

01:08.850 --> 01:11.140
We have the migration for it.

01:11.220 --> 01:18.690
We have controllers and we also have some middleware that will let us check if the user is later authenticated

01:18.720 --> 01:20.480
on some different pages.

01:20.610 --> 01:27.630
But we do not have the routes defined for those controllers and we also don't have some necessary views

01:28.020 --> 01:36.760
like for example the view to let the users register and logging now lovable also gives us a helping

01:36.760 --> 01:44.260
hand with that as it contains an artisan command which will generate the views all the necessary reviews

01:44.260 --> 01:52.770
for authentication system and it will also set up the routes for us but before I run this command I

01:52.770 --> 01:56.330
need you to know that I do not want you to run this command.

01:56.340 --> 02:05.250
Right now I will only show you what will get generated by it but it can override some of the files we

02:05.250 --> 02:09.240
already have like the home controller and the home view.

02:09.240 --> 02:16.830
And if your project is not under any version control like gate you might have some trouble resetting

02:16.830 --> 02:19.050
it to the previous state.

02:19.050 --> 02:22.300
So the command is make out.

02:22.530 --> 02:24.190
So remember Do not run it.

02:24.210 --> 02:32.640
I will only show you what we get out of running this command now as you see it found that we already

02:32.640 --> 02:38.490
have a home blade BHP view and it asks me if I would like to replace it.

02:38.610 --> 02:44.100
So I will just say yes for now and let's see what we get generated.

02:44.130 --> 02:49.050
Now let's take a look what happens when we will visit the larval test.

02:49.140 --> 02:55.530
So we are being redirected to the log in page and we see that we have a logging form and also layout

02:55.560 --> 03:02.520
changed a little bit and this is because the lateral has generated some of those views which some of

03:02.520 --> 03:07.590
them also replaced our home controller and the whole view.

03:07.620 --> 03:12.350
So this is how the home controller looks like now of course we shouldn't run this command.

03:12.360 --> 03:19.140
I'm only showing you what will it generate for us and we'll write up our selves anyway to explain it

03:19.140 --> 03:20.370
better.

03:20.370 --> 03:21.750
Now we have the home controller.

03:21.750 --> 03:29.010
You can see that we have added constructor or Lavell has added a constructor for this class and constructor

03:29.040 --> 03:34.650
is one of the places where you can register a middleware for this specific controller.

03:34.650 --> 03:40.350
So as you remember when we talked or mentioned middleware because we haven't talked about it in detail

03:40.350 --> 03:48.180
yet middle worse are these classes that you can add that can do something before a request or after

03:48.180 --> 03:55.410
a request and that is one of the middle worst that will do something before the request and you might

03:55.410 --> 04:00.120
have noticed that it registers this middleware for this whole controller.

04:00.120 --> 04:07.200
So for every action of this controller using the elf name and there isn't a middleware with this class

04:07.200 --> 04:11.460
name inside our HDP middleware folder.

04:11.460 --> 04:19.730
And that's because it is being configured inside the kernel kernel is also our class of our application.

04:19.740 --> 04:23.300
You can find it inside HDP.

04:23.310 --> 04:26.880
Now there is a field called Root middleware.

04:26.880 --> 04:31.720
And as the description says it's the application root middleware.

04:31.740 --> 04:34.600
So here is the definition of this alliances.

04:34.640 --> 04:43.110
So the South is actually pointing to our up HDP middleware our tentacle class which itself looks pretty

04:43.110 --> 04:48.650
simple but it extends the base class from Lara.

04:48.810 --> 04:51.270
So this Middleware is part of our project.

04:51.420 --> 04:58.260
But this class that it extends the authentic eight class is in the vendor libraries of Lavell.

04:58.380 --> 05:07.650
So if we go to this class by the way to go to a class you can just simply point over the class name

05:08.680 --> 05:16.030
with that out pressed and click on it and the visual studio code will direct you to this class.

05:16.270 --> 05:21.070
Now what this class does is you can see the handle method.

05:21.070 --> 05:27.940
So if you remember from our previous lectures this is before middleware.

05:29.320 --> 05:31.480
So let's see how that looks.

05:31.480 --> 05:37.660
So the before Middleware is basically a class that will have this handle method with request and the

05:37.660 --> 05:45.430
closure next to call and then next middleware that might be registered and it is doing something before

05:45.460 --> 05:53.110
that request is being handled only to call to next will actually pass this load to your controller.

05:54.310 --> 06:00.770
So as you can see it tries to call that authenticate method before it gets to the controller.

06:00.820 --> 06:02.560
And here is the authentic method.

06:02.890 --> 06:10.230
So it is using a Guard component which will get to in a bit to verify if you are authenticate it.

06:11.150 --> 06:13.390
OK this is pretty complicated.

06:13.390 --> 06:18.680
It might be but we'll explain that in detail in a bit so don't worry about that.

06:18.790 --> 06:26.290
Just so you know that by using this middleware which that alliance is given inside the kernel you are

06:26.290 --> 06:33.650
basically requiring authentication for all the actions in this particular controller.

06:33.700 --> 06:41.830
So if we would like to give a quick example and check the post controller we would only like probably

06:41.830 --> 06:46.150
to specify and that certain actions need authentication.

06:46.150 --> 06:48.420
That would probably be star.

06:48.460 --> 06:52.420
So when someone wants to other blog posts he should have an account.

06:52.450 --> 06:54.900
We'll see how to do it for separate actions.

06:54.910 --> 06:56.500
But just later.

06:56.500 --> 06:59.500
Now let's get to the basics.

06:59.590 --> 07:01.430
So we have this middleware out.

07:02.080 --> 07:09.620
And now you could see that this middleware has this redirect to method.

07:10.090 --> 07:19.660
And if you are not authenticated then this method is called and you can see that it redirects to the

07:19.660 --> 07:23.160
root and the root is specified as logging.

07:24.070 --> 07:30.430
So let's open the terminal and run command that we should know which is speech Auntie's on the route

07:30.430 --> 07:31.590
least.

07:31.720 --> 07:37.840
And now you can notice that there are a couple of routes that we haven't had before we have an added

07:37.900 --> 07:39.980
it ourselves.

07:40.150 --> 07:48.460
And this is for example logging which you can see goes directly to the show logging form action of the

07:48.460 --> 07:55.270
logging controller which happens to be part of our application because it was generated when we created

07:55.330 --> 07:57.720
a new lava project.

07:57.730 --> 08:04.870
There is also the post logging action which is responsible for actually trying to log you in.

08:04.880 --> 08:12.310
They are actually the user which would send the forum with logging and password.

08:12.310 --> 08:14.280
So where did that get from.

08:14.290 --> 08:21.920
Of course every route that we add should be added to the routes web BHP.

08:21.940 --> 08:30.120
So let's open that and you can see that those are our definitions that we have added before.

08:30.120 --> 08:36.900
And here's the thing responsible for those routes that our Earth class static routes method.

08:36.930 --> 08:43.530
It will out all the routes responsible for authentication of course you do not really have to use all

08:43.530 --> 08:48.090
that you can define the routes yourself manually as we did here.

08:48.240 --> 08:56.400
But it's just you know it's saving us some time if we would like to go with how Lavell is proposing

08:56.400 --> 09:01.790
us to handle authentication we can save time and to use it just out of the box.

09:01.800 --> 09:09.750
But of course you are free to generate your own logging controllers registration controllers and views

09:10.230 --> 09:13.130
and do it your own way.

09:13.140 --> 09:19.710
Now to verify that this is actually adding the routes Let's rerun the aunties on the route least so

09:19.710 --> 09:26.060
we can see the non actions responsible for registering or logged logging in.

09:26.100 --> 09:28.970
So this is what it does.

09:29.040 --> 09:32.220
So it registers those routes.

09:32.250 --> 09:36.510
Now let's go back so we were talking about this middleware.

09:36.510 --> 09:44.020
So as you can see this is the redirect to methods that you can modify here where you would like to move

09:44.020 --> 09:46.900
your users when they are not authenticated.

09:46.930 --> 09:52.810
So we want them to go to the logging page which basically is this one.

09:53.140 --> 09:55.200
So show logging form.

09:55.210 --> 09:59.470
Of course we can configure this as we wish.

09:59.470 --> 10:10.140
So we are opening this authenticate class and now to know how does it actually know it should call this

10:10.150 --> 10:13.390
redirect to method it is actually here.

10:13.390 --> 10:18.660
So when out integration fails it will actually call this method.

10:18.880 --> 10:27.520
So it will try to redirect you to the page or to the root which would be returned from that this redirect

10:27.700 --> 10:28.870
to.

10:28.870 --> 10:37.510
So since this class is being extended by our middleware we are just simply overriding the redirect to

10:38.200 --> 10:40.000
which should be somewhere here.

10:40.000 --> 10:41.920
Yes it is here but it's empty.

10:42.580 --> 10:44.760
And you can see that it is protected.

10:44.770 --> 10:51.670
So it is not publicly accessible but can be extend that in the class that is extending this base out

10:51.670 --> 10:56.390
integrated class and so is our middleware authenticate doing.

10:56.590 --> 11:05.950
And it is it has also a single simple check that when e it doesn't send back the Jason or it doesn't

11:06.010 --> 11:14.740
expect the Jason because in case of the API we do not want to do redirects it doesn't work that way.

11:14.830 --> 11:22.260
In case of the API we will just return an error back to the user but in the case of a tradition druthers

11:22.290 --> 11:29.580
channel application when we send a forum or visit a page we would like to redirect to the log in page.

11:29.940 --> 11:30.210
OK.

11:30.240 --> 11:33.860
So this is how we can secure a page.

11:33.860 --> 11:44.210
So like the basics of securing a page of course I understand that it might not be entirely clear especially

11:44.210 --> 11:47.930
that we haven't written in the media where our our self sits.

11:47.960 --> 11:54.790
So you might not really feel how that actually works but we will get into details of that.

11:54.800 --> 12:03.350
And I need I need you to stay with me for a couple of next lectures when I will go step by step on how

12:03.350 --> 12:09.770
don't take authentication and registration works and then we'll go on to implementing it ourselves.

12:09.830 --> 12:17.030
And further Fung explaining the further functionalities of their Larrabee authentication system and

12:17.030 --> 12:19.390
how the Guard component works.

12:19.430 --> 12:20.510
So stay tuned.

12:20.690 --> 12:24.870
We'll be explaining that in the couple of the next lectures.
