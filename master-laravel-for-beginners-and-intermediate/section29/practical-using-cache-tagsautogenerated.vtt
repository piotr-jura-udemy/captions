WEBVTT

00:00.360 --> 00:05.070
So now let's implement a simple example with the cash stocks.

00:05.100 --> 00:09.800
So currently we cash two items regarding at least blog posts.

00:09.810 --> 00:14.000
They would actually be for items because we also catch some users.

00:14.130 --> 00:20.310
But let's say we'll give an example with the most commented blog posts and the blog post itself.

00:20.310 --> 00:23.750
So when you go to the blog post this is actually being cached.

00:23.760 --> 00:24.770
You can see here.

00:24.810 --> 00:27.820
This only makes one query.

00:27.900 --> 00:37.520
Now if you will go to the post controller and modify starting with the show action the way we access

00:37.550 --> 00:39.030
the cache metals.

00:39.050 --> 00:48.260
So instead of calling the methods directly you will add code to tax first and we will tag that using

00:48.260 --> 00:51.630
their blog post tag.

00:51.640 --> 00:56.890
So this is how you would access and store cache items for the blog post.

00:56.890 --> 00:58.510
From now on.

00:58.510 --> 01:07.150
So let's copy this fragment and change the way we access and store the cache everywhere else.

01:07.210 --> 01:08.470
So let's remove that.

01:08.470 --> 01:11.230
Here we also add a call to the tags.

01:11.230 --> 01:15.580
Otherwise we just want to get the correct volume.

01:15.580 --> 01:17.740
Also we have to modify it here.

01:20.540 --> 01:27.450
Insight cache has the Haskell cache forever and cache increment.

01:27.500 --> 01:32.450
And finally here in cache get.

01:32.640 --> 01:34.970
Now let's also scroll to the top

01:37.690 --> 01:44.600
and modify this code for the most commented blog post and well target with the blog post tab.

01:44.710 --> 01:46.000
Now save the changes

01:50.590 --> 01:52.120
and let's see.

01:52.120 --> 02:00.600
So this should actually query the most commented blog posts so there are now cached.

02:00.900 --> 02:07.410
Also if you will go into one of those blog posts they will also be cached.

02:07.410 --> 02:14.070
So let's open a couple of the blog posts from the top mind that they might have different names on your

02:14.070 --> 02:20.660
machine because this is basically being generated by the database seeder.

02:20.860 --> 02:25.620
OK so we have some data cached.

02:25.620 --> 02:28.950
Now let's try to run the database seeder.

02:28.950 --> 02:38.080
So basically we now would have completely different data because we'll load that will generate doubt

02:38.110 --> 02:41.420
using cedar which will generate a completely different data.

02:41.650 --> 02:46.690
So I know it's not a finger you will do on your production environment but it is just to show you an

02:46.690 --> 02:48.400
example.

02:48.400 --> 02:53.020
How can we get rid of the old cache that should no longer be there.

02:53.020 --> 02:56.250
We want to reset this all at once.

02:56.320 --> 03:09.280
So first let's run peach bee artisan D.B. seed say yes and let us generate 20 users 50 blog posts and

03:09.280 --> 03:19.010
hundred fifty comments so at this point we should have a completely different data inside our database.

03:19.010 --> 03:26.480
So you should not see this title or those titles and the most commented blog post will have a completely

03:26.510 --> 03:27.630
different name.

03:27.680 --> 03:32.480
At this you shouldn't see those titles when you open the blog posts because when I will refer to the

03:32.480 --> 03:34.760
page they will be different.

03:36.170 --> 03:45.380
So let's do that let's refresh the page and now what you see here is completely different titles because

03:45.380 --> 03:51.200
we have just generated those blog posts so this data now doesn't exist at all.

03:51.200 --> 03:55.560
You can try that if you will copy this fragment and try to find it.

03:55.580 --> 04:02.050
You can see it is only found here on the most common that blog posts even VOL if you will click it.

04:05.180 --> 04:12.050
You can see that this blog post has a completely different title and it is because we have some old

04:12.050 --> 04:20.000
cache that we haven't flushed now to actually achieve that.

04:20.000 --> 04:22.710
We'll go to our database seeder.

04:22.910 --> 04:25.640
So let's find a database folder

04:28.100 --> 04:32.850
database folder database cedar.

04:32.880 --> 04:35.610
So now what we can do here is

04:38.430 --> 04:46.880
before we'll run our cedar or maybe after asking this questions we can use the cache phosphate mines

04:46.890 --> 04:57.200
to select the correct one to get the correct out or import in Visual Studio code like dot and now what

04:57.200 --> 05:07.180
we can do is we can also call it with tags provide the same tag name a blog post and call flash.

05:07.250 --> 05:14.960
So now what this will do is it will remove all the items whenever they were cached or doesn't matter

05:15.110 --> 05:19.140
in which place of your application and at what time they were cached.

05:19.310 --> 05:26.390
All this cache with with the tag block post or at least with the tag blog post because those items can

05:26.390 --> 05:33.320
have a couple of tags as we've seen in the previous lecture but now if you will call flash on that it

05:33.320 --> 05:39.420
will remove all those items from the cache.

05:39.430 --> 05:41.920
So now let's see what titles do we have.

05:42.100 --> 05:45.500
And you can see that this is actually out of sync.

05:45.550 --> 05:54.090
So whenever we last time when we have regenerated our seeder those were also still the old items.

05:54.100 --> 06:00.630
So this wasn't regenerated on the visit to the to our blog post page where it should be.

06:00.640 --> 06:07.780
So I mean this this wasn't regenerated because it failed it has already a cache for those items but

06:07.870 --> 06:09.210
they were out of sync.

06:09.220 --> 06:17.020
But at this point this has no way to know that those cache is not fresh anymore.

06:17.020 --> 06:22.960
So let's run P2P artisan D.B. seed say yes

06:26.630 --> 06:32.570
now let's use default values or 50 posts and hundred fifty comments.

06:32.570 --> 06:40.040
So now that data is regenerated we should see different titles but also take a close look at what happens

06:40.040 --> 06:42.800
at the right side of our page.

06:42.800 --> 06:49.370
So those most comment and blog posts will now actually be regenerated because we have flash the cash

06:49.490 --> 06:57.650
after we have basically loaded are completely set of the new completely new set of data to our database.

06:57.650 --> 07:00.740
So let's refresh take a look at the right.

07:01.130 --> 07:07.090
And you can see those are now completely different titles.

07:07.340 --> 07:16.020
So if you will visit them you will see that the title reflects what you can see on the box on the right

07:16.110 --> 07:18.660
of the most commented blog posts.

07:18.660 --> 07:26.820
So obviously this is just an example you would not be loading data using data by Cedar on your product

07:26.820 --> 07:27.930
production environments.

07:27.930 --> 07:36.780
It makes no sense basically but there might be a case where you would like to reset all the cash that

07:36.780 --> 07:44.340
is being associated with a certain tack for whatever reasons that might be that you've made some changes

07:44.340 --> 07:48.430
to your database schema and you need to load some new data.

07:48.660 --> 07:56.340
And this would be an easy way to do it at once using this simple command that can remove all the cache

07:56.790 --> 08:01.350
regarding that is associated with our particular tag.

08:01.380 --> 08:09.030
So as I've said one of the good examples could be that for example blog post database schema schema

08:09.060 --> 08:09.740
has changed.

08:09.750 --> 08:17.640
Now it has some new fields and your cash only contains the fields that were inside your blog post model

08:18.060 --> 08:21.040
before you made that change to the schema.

08:21.480 --> 08:26.700
And that's way using tax you can easily clear all this cash at once.
