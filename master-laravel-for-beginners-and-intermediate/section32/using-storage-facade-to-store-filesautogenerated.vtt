WEBVTT

00:00.360 --> 00:02.220
Now let's pick up where we have left.

00:02.220 --> 00:09.980
The last time so we were uploading a file which was an image and then we are dumping some information

00:10.010 --> 00:20.030
about that file so this was the file itself and then we use this file object which is of type uploaded

00:20.030 --> 00:27.200
file to get the client mind type the original extension and then that's important.

00:27.200 --> 00:35.600
We have used the file store method to immediately store it inside the farmer names folder.

00:35.600 --> 00:38.870
So let's see where this file has actually ended up.

00:38.870 --> 00:41.660
So this is the main directory of our.

00:41.670 --> 00:49.910
Up here we have this storage folder the app folder that public folder and farm names folder so you can

00:49.910 --> 00:57.920
see that this file name is matching the name that we have dumped here.

00:58.110 --> 01:07.150
So what file store does is it's a shortcut for using their storage for seed and it will use the default

01:07.150 --> 01:12.370
the disk that you have configured so in our case it is public disk.

01:12.380 --> 01:16.560
This setting should be inside your dot and file.

01:16.610 --> 01:28.410
So what this is equivalent of is there is this storage for seed you of course have to add an import

01:28.740 --> 01:29.490
to use it

01:33.700 --> 01:39.880
so this storage seed can be used to access a disk using the disk static method

01:43.200 --> 01:49.770
so that way we are seeing to it that we want to operate on the public disk if you want specify a disk

01:49.800 --> 01:56.700
you have access to all the storage methods but then you will work on the default disk but let's do it

01:56.790 --> 01:57.830
like that.

01:57.900 --> 02:05.960
So disk and then the storage has the put file method.

02:06.130 --> 02:08.830
Now here you will also specify a folder.

02:08.980 --> 02:11.050
So let it be the same.

02:11.050 --> 02:12.370
So fond nails

02:15.750 --> 02:19.220
and the second argument is the actual file.

02:19.230 --> 02:25.440
So we will use the uploaded file instance so let's save this changes.

02:27.600 --> 02:27.850
OK.

02:27.880 --> 02:29.410
So we are also dumping that.

02:29.420 --> 02:37.690
Now let's refresh and now what you see is to exactly the same file names.

02:38.320 --> 02:42.660
So basically this is an exact the same operation.

02:42.670 --> 02:49.990
So the file store is just a shortcut to use the storage on the default disk.

02:50.010 --> 02:52.050
So I'm writing it right now here.

02:52.050 --> 03:01.030
Just to be explicit and then it is using that put file method to generate a file name out dogmatically.

03:01.080 --> 03:03.400
So it is being generated by Lavell.

03:03.510 --> 03:08.190
We haven't specified it to be called like you see on the screen.

03:08.400 --> 03:17.310
It will also guess the file extension of that file using the MIME type and store it inside this folder

03:17.460 --> 03:19.320
on the disk specified.

03:19.320 --> 03:27.330
And as we remember the public disk is configured to be inside the storage folder up public.

03:27.330 --> 03:33.900
So basically this will create a new fund nice folder or just put something to the fact Fund notes folder

03:33.960 --> 03:41.410
if it already exists no sometimes you might want to specify the file name yourself.

03:41.700 --> 03:44.150
So let's comment that out.

03:44.220 --> 03:49.740
So the first way to do that would be to also use the uploaded file instance

03:52.690 --> 03:59.080
and use that store as method which accepts options as you see on the screen.

03:59.080 --> 04:04.110
So first one would be also the folder where you want to keep it.

04:04.120 --> 04:05.500
So that would be fun.

04:05.500 --> 04:10.280
Nails but the second one is the actual file name.

04:10.280 --> 04:14.210
So in this case you are giving the file the name that you wish.

04:14.210 --> 04:24.910
So in case that we are uploading blog posts and there will only be one family image we already have

04:24.910 --> 04:26.490
a blog post instance.

04:26.530 --> 04:29.730
So you might do something like this.

04:29.860 --> 04:37.360
So the file name would be the same as the idea of the blog post but it's also useful to give the file

04:37.420 --> 04:38.530
an extension

04:41.290 --> 04:48.460
and what you can do to achieve that is either get client or regional extensions so the file would be

04:48.460 --> 04:53.310
given the extension that was on the file when a user uploaded it.

04:53.470 --> 04:59.770
It's never safe to do that because you should never actually trust your users.

04:59.770 --> 05:05.530
But there is another way you can get an extension which is guess extension

05:08.750 --> 05:17.570
so this is the one way to immediately store and upload that file but this is actually an equivalent

05:17.930 --> 05:29.460
to using storage boot file us where you actually provide the exact same parameters with the exception

05:29.460 --> 05:36.770
that first you specify a folder where you want that file to be kept.

05:36.820 --> 05:44.260
The second parameter is the actual file so you have to pass the file instance and the second sort of

05:44.260 --> 05:47.470
the first parameter would be the file name.

05:47.470 --> 05:49.330
So let's copy what we have here.

05:53.020 --> 05:56.040
And now let's refresh this page.

05:56.040 --> 06:03.940
So we will send the same image again and you can see that those are the files with the names that we

06:03.940 --> 06:06.660
have given to it actually.

06:06.730 --> 06:14.230
We should also add adults to separate the extension but other than that this is the way you can give

06:14.230 --> 06:17.830
the files custom names if you of course need that.

06:18.370 --> 06:25.210
Sometimes it might be more convenient for you to just have the file name configured.

06:25.240 --> 06:34.210
So in case you do not want to store the file name somewhere inside the database because when we will

06:34.210 --> 06:39.600
use those methods with auto generated names let's see that.

06:40.840 --> 06:43.170
OK so those names are outer generated.

06:43.180 --> 06:50.020
So if you do not store this name at this point of uploading inside the database you basically are losing

06:50.020 --> 06:50.320
this.

06:50.320 --> 06:55.360
There is no way you can then figure out what should be the name of the file that you have uploaded.

06:55.360 --> 07:02.080
Of course it is on the disk about well you will have hard time figuring out what was the name of the

07:02.080 --> 07:05.730
file that you might want to show on the blog post page.

07:06.010 --> 07:13.480
But in this case it is much simpler so we don't really have to store this name inside the database because

07:13.480 --> 07:17.850
the file name is actually the blog post I.D..

07:18.040 --> 07:21.000
So then it's very easy to fetch this file.

07:21.100 --> 07:25.610
When you have a blog post and you will know what file name to look for.

07:25.630 --> 07:31.290
Well maybe with the exception of the extension which you also would have to know.

07:31.540 --> 07:36.370
But anyway you can see that those two methods were equivalent.

07:36.370 --> 07:45.460
So file store is equivalent to the storage and the same is with giving the file name so we can either

07:45.460 --> 07:50.920
use file store arse or storage put file us.

07:51.010 --> 07:57.670
So I've said that when you do not specify a disk like that it is using our default disk.

07:57.670 --> 08:06.150
So now let's try another example when we will actually specify a disk first so let's see what disks

08:06.210 --> 08:07.190
we have available.

08:07.200 --> 08:09.180
So other than public we have local.

08:09.180 --> 08:15.600
We want to try as free because this would require us to set up an Amazon account at this point which

08:15.690 --> 08:21.300
isn't really a part of this course but feel free to do that if you have access to one.

08:21.390 --> 08:25.590
So we'll use the local disk as an example.

08:25.590 --> 08:32.220
So we are specifying the line above should use the default disk and stored the file with the given name

08:32.430 --> 08:39.260
and line below when we use the storage for say it should store that file on the disk called local.

08:39.360 --> 08:47.010
So let's refresh again and you can see that those names are exactly the same.

08:47.010 --> 08:50.640
Yet those files are in storage in the same exact place.

08:51.870 --> 09:02.010
So you can see that there is this 85 J pack file inside our storage folder so let's go through them

09:02.100 --> 09:02.550
again.

09:02.550 --> 09:09.840
So this is our main folder storage up public thumbnails.

09:10.080 --> 09:13.150
And there is that there is the 85 JPEG.

09:13.950 --> 09:20.220
But the second time we have stored the file using the disk local which is configured differently.

09:20.220 --> 09:26.310
You can see that it stores directly inside the storage folder.

09:26.310 --> 09:27.350
So let's go back

09:30.860 --> 09:39.510
so here is the storage folder and you can see that apart from the public folder inside the app we also

09:39.510 --> 09:43.110
have the farm names folder.

09:43.170 --> 09:46.830
So this is what happened when we have used the local disk

09:49.860 --> 09:54.270
so it is using the storage path and then the app directory.

09:54.270 --> 09:56.250
So that's a very simple example.

09:56.250 --> 10:05.010
Those two disks basically are using the same driver which is your application directory but they store

10:05.010 --> 10:07.290
them inside the different folders.

10:07.290 --> 10:15.150
So in the next lecture will we'll see how we can figure out what is the actual you URL you should use

10:15.960 --> 10:24.110
to show this file to the client and then how to make those files publicly available because since this

10:24.110 --> 10:32.160
storage folder is actually part of our application and we know that publicly visible files should be

10:32.220 --> 10:36.530
stored inside the public folder you will see how you can achieve that.

10:36.530 --> 10:40.050
So everyone can see this file.
