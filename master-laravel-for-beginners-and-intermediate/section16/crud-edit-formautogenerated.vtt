WEBVTT

00:00.870 --> 00:08.490
When making changes to a model, often you would like to reuse the same form that you had for creating

00:08.490 --> 00:10.140
the model in the first place.

00:11.040 --> 00:13.590
That's exactly what we will do here.

00:14.070 --> 00:21.570
I'm not saying to always try to use the same code for create or edit form, you would have to decide

00:21.570 --> 00:22.860
if it's worth it.

00:23.340 --> 00:26.250
Programming is always finding a balance.

00:26.440 --> 00:27.130
In this case.

00:27.140 --> 00:32.150
It's the balance between code reuse and additional complexity introduced.

00:32.670 --> 00:33.840
But don't worry about that.

00:33.840 --> 00:43.200
Too much decisions like this are simpler as you gain experience to reuse a forum which will create a

00:43.200 --> 00:46.830
partial cold forum blade.

00:48.240 --> 00:55.750
Poppy, let's move the inputs and error reporting there from the Create Blade HP.

01:09.050 --> 01:14.450
Then includes the partial in the create template.

01:15.470 --> 01:18.650
Now we can create that added form.

01:20.090 --> 01:24.380
Inside the eddied blade pop file.

01:25.990 --> 01:33.580
Notice how the template name matches the resource controller action name where it will be rendered.

01:35.080 --> 01:42.100
The first step is to copy over the contents of the create template.

01:43.350 --> 01:52.230
We need to make some changes here, the roots to form a sense to these posts, update.

01:53.800 --> 02:02.710
This route needs to have a parameter, so let's assume the variable called post with the blog post model

02:02.710 --> 02:05.040
instance will be passed to this template.

02:05.920 --> 02:09.910
Let's set route parameter called post.

02:11.340 --> 02:18.060
As the action updating specific model needs to know the idea of the model.

02:19.440 --> 02:27.410
Then the trivial changes of the labels, so first the title, let's change it from create to update.

02:27.780 --> 02:33.300
And so with the submitting button from create to update.

02:34.730 --> 02:44.540
Next comes the issue of HTP verb used on editing actions, it has to be Putes or Parch.

02:45.590 --> 02:55.640
Wait a minute, how would you send a form when HTML only allows the method attribute of the form tag

02:55.640 --> 02:58.670
to be either get or post?

02:59.900 --> 03:04.310
Well, there comes a lot of a mechanism called method spoofing.

03:04.880 --> 03:17.040
The method attribute can stay exposed, but you need to add the method directive with the actual method.

03:17.600 --> 03:26.420
Put this would add a hidden underscore method field to the form and will let Laravel understand that

03:26.420 --> 03:33.680
you intended to hit the put or patch and point even though the actual HDB method to use post.

03:33.920 --> 03:35.660
So we are sorted here.

03:38.380 --> 03:48.790
Now, please open the web routine config file and let's enhance the edit route as one of the enabled

03:48.790 --> 03:51.160
routes for our resource controller.

03:53.490 --> 04:01.860
Now, let's open the post controller and we will implement the added action, we have the model ID.

04:02.910 --> 04:10.470
So we need to fetch the model using blog post, find or fail.

04:13.120 --> 04:17.710
And we will pass it to the view function.

04:18.860 --> 04:25.820
That is responsible to render the form, so the view name is posts edit

04:28.820 --> 04:37.250
and it needs a post template variable to which will pass the model we have just fetched.

04:41.550 --> 04:44.250
Let's see if we can test this form.

04:45.460 --> 04:52.710
So let's visit a forum for the blog post 81, assuming you have a blog post with such ideas in the database.

04:53.860 --> 05:03.130
And we get an error, the root posts dot update is not defined well, this should be expected because

05:03.310 --> 05:09.420
in the edit forum we rely on this route to be defined to generate.

05:09.430 --> 05:10.510
Are you ready for it?

05:11.050 --> 05:18.610
And we haven't enabled this route inside the Web routing file, so we have to add it.

05:22.140 --> 05:28.390
Now, the next thing that comes up, you'd expect the form to be filled with current data.

05:28.770 --> 05:32.880
So let's refresh this route for the existing post.

05:33.840 --> 05:38.310
And surprise, the form is empty, so not ideal.

05:39.360 --> 05:40.850
Let's see what we can do.

05:42.700 --> 05:51.220
Fortunately, the old function allows specifying our default value, so let's use that set the default

05:51.220 --> 05:54.940
value to be post title.

05:57.290 --> 06:00.890
And post content, respectively.

06:05.580 --> 06:08.430
Now, refresh the form, it works now.

06:10.580 --> 06:19.010
But wait, we use the same forum for creating models, too, would it still work if we don't pass the

06:19.010 --> 06:20.270
post model their.

06:23.060 --> 06:24.470
Well, of course it won't.

06:25.280 --> 06:26.710
So are we stuck again?

06:28.340 --> 06:33.170
No, of course not, Laravel offers elegant solutions to all problems.

06:33.770 --> 06:37.220
Here comes the optional helper function.

06:37.790 --> 06:41.600
Surround an object with an optional call.

06:48.300 --> 06:55.380
And you can access its properties, whether the object is null or not, pretty nice feature.

07:05.720 --> 07:14.030
But Blade will still complain if the variable is not defined at all, and while that is our case, the

07:14.030 --> 07:19.250
post variable is not no, it's just not defined at all.

07:20.000 --> 07:25.280
So another solution, just to use the null coalescing operator.

07:31.110 --> 07:38.220
It returns the value on the left or the value on the right, if the value on the left is null or does

07:38.220 --> 07:38.970
not exist.

07:39.540 --> 07:41.430
This solves our problem.

07:43.740 --> 07:45.180
So let me say that again.

07:45.540 --> 07:49.800
If both would be existing and not null, it would be used.

07:50.520 --> 07:55.450
If it would be not defined or null, the value on the right will be used.

07:55.470 --> 08:00.510
And since we surrounded with an optional function, we are all set.

08:04.950 --> 08:13.590
So refresh, and now we have the same form we can use for creating and editing the post.

08:18.200 --> 08:26.060
So as a summary, you've definitely learned some useful techniques, but also you can see that sometimes

08:26.060 --> 08:28.860
trying to reuse code might not be worth it.

08:29.570 --> 08:36.860
It might be simpler to just create two separate form templates, but I'm not going to tell you which

08:36.860 --> 08:37.920
option is better.

08:37.970 --> 08:41.120
It's up to you and your preference.

08:41.570 --> 08:46.460
Anyway, our goal here is not to just build another blog post up.

08:46.730 --> 08:51.970
Our goal is to learn using all possible techniques Laravel has to offer.

08:53.210 --> 08:55.460
We've chosen the more complex way.
