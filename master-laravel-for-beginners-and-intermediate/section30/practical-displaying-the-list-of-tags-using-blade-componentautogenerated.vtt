WEBVTT

00:00.930 --> 00:07.890
Now that we have learned some Terry about the many to many relationship let's create something inside

00:07.950 --> 00:13.170
our application and we'll only use the knowledge that you already have.

00:13.170 --> 00:19.680
So we will create a new component to display the least of tags will displayed out on both the blog post

00:19.680 --> 00:24.270
least on on the and on the individual blog post The View.

00:24.270 --> 00:31.500
So let's go ahead and create a new component inside the components folder of the views folder let's

00:31.500 --> 00:37.670
call it tags blade BHP.

00:37.680 --> 00:40.420
Now this would be surrounded with a paragraph.

00:41.070 --> 00:47.820
So let's add this paragraph tag and we will simply iterate over all the past tags.

00:47.850 --> 00:50.760
So this is a separate slot.

00:51.060 --> 00:53.040
Close it with and for each.

00:53.280 --> 00:56.160
And inside it will display a link.

00:56.490 --> 01:03.330
Now this would this won't lead to any place but in the next lecture will make it so that clicking on

01:03.330 --> 01:11.850
a particular tag will actually display a list of blog posts associated with particular tag.

01:11.850 --> 01:20.850
Now let's add some bootstrap classes we'll use that batch classes to display a tag closed their anchor

01:21.930 --> 01:26.730
and inside it will echo the tag name.

01:28.030 --> 01:28.450
OK.

01:28.470 --> 01:32.100
Now we'll have to go to the service provider.

01:32.130 --> 01:39.960
We can even copy this line to make it quicker for us and the new component name would be tags so we

01:39.960 --> 01:43.920
can apply I said to make it easier for us to use this component.

01:44.840 --> 01:45.260
OK.

01:45.270 --> 01:46.830
We have the component created.

01:46.830 --> 01:49.650
So now let's go to the index page.

01:49.830 --> 01:54.930
We might display those stacks here below the updated date.

01:54.930 --> 01:57.030
So the component is called tags.

01:57.030 --> 02:00.570
Now we have to provide a value for the slot.

02:00.570 --> 02:03.830
That's the only way we can do that are to pass an object.

02:03.840 --> 02:14.110
Because this would actually be post docs here who can immediately close this directive.

02:14.140 --> 02:17.800
So this is how we can display a list of tasks.

02:17.800 --> 02:26.840
Now just copy that and inside the show blade BHP which is responsible for rendering our particular blog

02:26.840 --> 02:29.960
post will add the same component.

02:30.350 --> 02:35.630
Now to see any tags you should already have some tags associated.

02:35.650 --> 02:38.160
And we did that in previous lectures.

02:38.240 --> 02:41.690
So currently we have free tax created.

02:42.620 --> 02:46.610
But two of them are associated with blog posts with either one.

02:46.940 --> 02:53.510
So after we refresh this page we should see two tags associated and we do.

02:53.510 --> 02:59.930
So you see that here this is with the associated to the blog post with I.D. one might be different depending

03:00.350 --> 03:03.560
what you did in the last lectures.

03:03.560 --> 03:09.610
Now also if we'll go to this blog post the view we can also see the same tags.

03:09.710 --> 03:14.800
So the problem with that is that the font seems to be a little bit small.

03:15.080 --> 03:23.720
So we can increase the font by opening the up SPSS and creating a new new class.

03:23.720 --> 03:31.900
So let's call it batch algae like large and specify the font size to be 1 0.

03:31.910 --> 03:36.480
So by default the batch classes make font a little bit smaller.

03:37.160 --> 03:41.400
So if we'll use this class this would make those tags visible.

03:41.480 --> 03:44.480
Now we'll add this class inside component

03:48.400 --> 03:57.540
but before we see changes we need to run NPM around def to rebuild our style file using larval makes

04:00.720 --> 04:01.080
OK.

04:01.090 --> 04:09.290
It is being rebuilt now refresh the page and the tax should be much bigger.

04:09.370 --> 04:15.790
Also the same effect should be visible on the main page and those are linked.

04:15.790 --> 04:22.810
So in the next lecture we will implement it the way that when you press a particular tag you can only

04:22.810 --> 04:27.200
see blogs that are related to this tag.

04:27.220 --> 04:32.740
Now if you would like to use a different style for the tax you can check out this documentation page

04:32.740 --> 04:38.830
for bootstrap where you have different styles specified so you can use any of those classes that you

04:38.830 --> 04:40.150
wish.

04:40.150 --> 04:47.310
Also we have to handle one more thing now that we have our larval debug bar.

04:47.320 --> 04:49.830
We can see how many queries are made.

04:49.930 --> 04:56.620
So you can see the problem that I've mentioned before that if you access some relation of an object

04:56.890 --> 05:05.900
inside the view then it produces a crazy amount of queries because it has to query for the tags relation

05:05.920 --> 05:07.590
each time you access that.

05:08.320 --> 05:17.460
So we can do lazy loading or eager loading and in such cases it's much better to go with eager loading.

05:17.800 --> 05:22.120
So we'll have to modify how the queries are made inside the post.

05:22.120 --> 05:22.840
Controller

05:25.440 --> 05:30.450
so here we fetch all the blog posts with comments and with user

05:34.880 --> 05:43.370
so let's modify it a little bit so we'll also fetch it with tags so we can also do that for the relation

05:43.460 --> 05:52.280
which is many to many and since we are also fetching our blog posts here we should also add it with

05:52.280 --> 05:53.350
tax.

05:53.810 --> 06:00.710
And additionally we can also fetch it along with the user because we showed the user data also inside

06:00.780 --> 06:04.030
an individual blog post view.

06:04.040 --> 06:12.140
So save the changes refresh the page and it should reduce the amount of queries made significantly so

06:12.140 --> 06:14.780
we can see only free queries are made.
