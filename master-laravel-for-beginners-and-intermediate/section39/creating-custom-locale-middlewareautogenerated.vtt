WEBVTT

00:00.750 --> 00:06.810
Last time you've seen how to store the user preferred language inside the database and also we've added

00:06.810 --> 00:12.780
this field to the user editing form so now he can store his preferred language.

00:12.780 --> 00:15.150
Now let's see how we can actually apply this.

00:15.330 --> 00:24.380
So let's open the terminal and we will generate our first own middleware so BGP RDM make middleware

00:25.080 --> 00:32.950
and let's call it a local middleware so let's locate our new local middleware.

00:32.960 --> 00:37.800
It should be inside the up HDP DTP middleware local middleware.

00:38.860 --> 00:47.890
Now we have some nice boiler plate generated by Lavell and now this would be B before middleware so

00:47.890 --> 00:53.710
let's take a look at this middleware diagram that we've seen before to remind ourselves how it works.

00:53.710 --> 00:56.050
So it starts with our request.

00:56.050 --> 01:02.320
Then the logic is being passed to that before middleware switch execute before the actual controller

01:02.500 --> 01:04.990
or closure handling a route.

01:04.990 --> 01:11.770
So it's passing to some middleware as defined as the before middleware and then the controller action

01:11.830 --> 01:12.790
is executed.

01:12.820 --> 01:20.000
And then additionally there is some after mid or worse and only then the response is being generated.

01:20.020 --> 01:25.280
So since we actually want to do something before the user will reach an IT page.

01:25.300 --> 01:27.100
So we want to set the language.

01:27.100 --> 01:31.000
If it's not said we want our before middleware.

01:31.540 --> 01:39.340
So this would mean adding this logic before we call next.

01:39.360 --> 01:39.760
All right.

01:39.760 --> 01:46.270
So let's start with our simple variable which would be local set to nil.

01:46.270 --> 01:52.510
So we need to figure out somehow if the if there is any information about the local.

01:52.510 --> 01:54.850
That should be set for the user.

01:54.880 --> 02:01.000
So our first condition would be to do that of check.

02:01.100 --> 02:08.020
So we verify if the user is actually authenticated so mind that we need this import of the Alpha seed.

02:08.060 --> 02:16.520
So if the user is authenticated and we will store the actual locale for the user in the user session.

02:17.420 --> 02:20.660
So now we have to use the session objects.

02:20.690 --> 02:24.530
So let's add another import for the phosphate here.

02:25.010 --> 02:32.510
And now if the session doesn't have the logo already because we do not want to override it all the time.

02:32.510 --> 02:40.340
So we use session House which is our method to check if the session has something under the specific

02:40.340 --> 02:41.270
key.

02:41.270 --> 02:43.400
So in this case it's local.

02:43.400 --> 02:51.410
So if the user is authenticated and there is no local stored inside the session yet we'll modify the

02:51.410 --> 02:57.740
local value and we'll read it from the request user.

02:57.740 --> 03:00.200
Remember this is fetching Rs the current user.

03:00.230 --> 03:05.690
Alternatively you can also use our user depending on your preference.

03:05.900 --> 03:12.560
And this will fetch as the user object which happens to have the local attribute right now.

03:12.560 --> 03:18.500
Now will do another thing which is session put to store days inside the session.

03:18.500 --> 03:22.400
So local both local and the variable.

03:23.640 --> 03:31.610
Okay so let's see that again if the user is authenticated and there is no local in his session yet then

03:31.670 --> 03:39.880
read the user preferred local from the user eloquent model as a user to as the local attribute that's

03:39.890 --> 03:45.200
the attributes of the user model and put it to the session.

03:45.260 --> 03:56.590
So now another condition if the user or if there happens to be a request parameter called local then

03:57.310 --> 04:00.660
the local would actually be read from the request

04:03.910 --> 04:10.750
so if the request has the local parameter it can be a query parameter lets you read that parameter.

04:10.810 --> 04:14.730
And now store it inside the session.

04:14.890 --> 04:18.530
So session put local

04:21.380 --> 04:27.440
I'm just doing that for readability we can just immediately call session put with the value that we

04:27.440 --> 04:29.360
read from the request.

04:29.420 --> 04:37.040
Now why are we doing that is actually to allow users to change the language on the fly and we have what

04:37.040 --> 04:38.960
you will see in the next lecture.

04:39.110 --> 04:47.240
We should be to create specific links that will actually create a patch to redirect with this local

04:47.240 --> 04:53.600
parameter depending on the url provided but you will see that in the next lecture.

04:53.600 --> 05:02.730
Now finally we read the locale from the session so session Session get local

05:06.660 --> 05:07.740
and if

05:10.740 --> 05:14.610
local is normal what we will do.

05:14.760 --> 05:22.920
So this can happen if Well there is no request parameter or user doesn't have specified preferred language

05:22.920 --> 05:29.640
which shouldn't happen because we have a default value but well just in case we can also set local to

05:29.640 --> 05:33.150
the default configuration value from the UP.

05:33.150 --> 05:33.900
BHP

05:37.750 --> 05:41.010
Well we can also use fallback locale or the local value.

05:41.020 --> 05:42.480
Now let's see how we can do that.

05:42.480 --> 05:49.420
So there is this config helper function which you can use and call it like up which means that up.

05:49.420 --> 05:54.890
BHP and now dot fallback local.

05:54.970 --> 06:01.460
So if there is nothing absolutely nothing will get the local from the config.

06:01.510 --> 06:07.030
And now finally to set the language of the application it's actually very simple.

06:07.090 --> 06:10.370
So we use another phosphate that up for seed.

06:10.840 --> 06:18.380
So make sure you've added this import here and it is set local.

06:19.150 --> 06:23.590
And now we have this variable and that's it.

06:23.590 --> 06:25.290
Of course that's it.

06:25.330 --> 06:31.390
With everything that we have to write inside this local middleware for it to work but of course we have

06:31.390 --> 06:37.900
to then register this model where it won't be picked up by anything ultimately.

06:37.900 --> 06:43.990
So to add this middleware to Lara Val and so Lavell knows that it has to use it.

06:44.200 --> 06:50.560
We have some options available so we can add this to the middleware groups.

06:50.560 --> 06:58.180
So all the routes that are part of the web group which happens to be everything that we define inside

06:58.180 --> 07:02.500
the web BHP file which is for our traditional routes.

07:02.950 --> 07:06.390
They have some middleware is defined.

07:06.430 --> 07:09.010
Now one of those is the start session.

07:09.010 --> 07:15.250
And since we are using the sessions inside our middleware this has to come after.

07:15.490 --> 07:23.590
So by adding our middleware here what we will do is we will make it available make it work for every

07:23.590 --> 07:27.550
possible route that we have defined inside web BHP.

07:27.550 --> 07:31.960
So in our si situation that's every route.

07:32.200 --> 07:37.970
Now you have to add this local middleware class to this Web group.

07:38.080 --> 07:42.070
And what we can also do in.

07:42.130 --> 07:47.650
Well in case you would like to do that so you would like to enable this middleware only for certain

07:47.650 --> 07:51.470
controllers let's say for both controller.

07:51.580 --> 07:53.480
So let's take a look inside it.

07:53.530 --> 08:02.160
We register our middleware the authentication only for this controller and now in kernel the ALF is

08:02.160 --> 08:07.020
basically a shortcut to this middleware class.

08:07.560 --> 08:16.800
So you can also add our custom one like locale and then specify the fully qualified class name to the

08:16.860 --> 08:19.500
to our new local middleware.

08:19.500 --> 08:26.340
And after that you will be able to add this middleware per controller using this middleware code inside

08:26.340 --> 08:33.140
controller and using this alliance the local that of course we do not want to do that.

08:33.150 --> 08:39.420
We want middleware our local middleware to be global for every web route.

08:39.420 --> 08:45.430
That's why we have added it inside the middleware groups for the web group.

08:45.450 --> 08:45.910
Okay.

08:45.930 --> 08:50.290
So now save the changes and let's go to our Web site.

08:51.690 --> 08:56.010
So now when you refresh you can see that everything is in German.

08:56.220 --> 09:00.420
And if you will try to change the language to Spanish.

09:00.420 --> 09:05.830
Now you can see everything is in Spanish if you will change that to English.

09:05.830 --> 09:12.150
Now everything is in English so let's change it to Spanish.

09:12.170 --> 09:13.320
Let's log out the user.

09:13.340 --> 09:20.850
So we see that the default is the English but if we are logging as John again.

09:21.040 --> 09:27.180
Now the language is immediately changed to his preferred one which happens to be Spanish.

09:27.190 --> 09:30.550
So this is our middleware in action.

09:30.550 --> 09:30.780
OK.

09:30.790 --> 09:33.550
Now let's take another look at our middleware.

09:33.640 --> 09:38.850
So what you see here is well this is what makes language work.

09:38.860 --> 09:41.410
So if the language is stored for the user.

09:41.440 --> 09:48.190
We read it and says should set it to the session but then alternatively we also check if there is this

09:48.190 --> 09:51.810
local parameter on the request.

09:52.060 --> 09:54.000
So let's go to the home page.

09:54.490 --> 09:56.560
And this is how you are the query parameter.

09:56.560 --> 10:00.550
So if you will specify this parameter US English.

10:00.550 --> 10:03.490
Now we can see that the page has changed to English.

10:03.910 --> 10:10.300
Let's try with German and you can see that now everything is in German and then you do not really have

10:10.300 --> 10:15.730
to pass this parameter around because the first time it is being found it is then stored to the user

10:15.730 --> 10:16.750
session.

10:16.750 --> 10:19.530
And now if you visit all the other pages.

10:19.540 --> 10:26.400
Now everything is in German so we'll use that in the next lecture inside Apache.

10:26.440 --> 10:34.520
So you will have links like the posts and then this will ultimately make this page in German.

10:34.520 --> 10:42.760
So then what we will do is we will allow users to make language part of the URLs themselves without

10:42.760 --> 10:48.970
changing a thing in light of all this would be strictly US server Apache configuration.

10:49.420 --> 10:51.700
So let's see that in the next lecture.
