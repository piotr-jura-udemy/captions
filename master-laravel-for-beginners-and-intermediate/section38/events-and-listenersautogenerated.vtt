WEBVTT

00:01.450 --> 00:08.020
In the last lecture you've seen how we can move even the handling of our particular eloquent model from

00:08.020 --> 00:16.300
the model itself and using closures on the boot method of that model to a specific class that was called

00:16.390 --> 00:18.130
an observer.

00:18.130 --> 00:25.060
So what you would also have to know is that the events are built in into Lavell.

00:25.450 --> 00:32.950
So what I mean by that is lot itself is depart dispatching many events of different kind.

00:32.950 --> 00:42.230
When something happens also you can create your own events and dispatch them and then handle them somehow.

00:42.430 --> 00:43.900
So they are generally free.

00:43.900 --> 00:44.770
Fixing this.

00:44.830 --> 00:50.820
So there are events which are just a simple classes that will contain some data.

00:50.830 --> 00:58.960
So for example here with the green color you see events and other classes that are predefined in Lavell.

00:58.990 --> 01:06.160
So for example whenever someone registers lower level will dispatch are registered event.

01:06.730 --> 01:09.310
And then there is at least an error.

01:09.370 --> 01:10.970
So what is the and released there.

01:10.970 --> 01:19.540
There is also a class but it can only handle one type of the event but the upside of at least an hour

01:19.540 --> 01:25.010
is that it can be a cube job so it can immediately go on a queue.

01:25.120 --> 01:31.570
Now there are also subscribers and subscribers can handle many events at once.

01:31.570 --> 01:40.060
So you can create one class that can have some logic for handling one two three or five events in one

01:40.060 --> 01:45.640
class but subscriber cannot be a cute job.

01:45.640 --> 01:47.620
So let's take a look at an example.

01:47.620 --> 01:56.590
So in our project we have inside the folder there is the register controller and this was immediately.

01:56.610 --> 01:58.800
This was generated by Lavell.

01:59.670 --> 02:08.850
And what this does is you can also check out the registers user trade and there is this register method.

02:08.850 --> 02:15.780
So what you can see is that when you register and this controller is responsible for creating a new

02:15.780 --> 02:24.340
user it's calling event helper method and is dispatching registered event.

02:24.360 --> 02:31.650
Now let's take a look at this registered event so this class is also part of the Lavell.

02:31.700 --> 02:33.040
It's a very simple class.

02:33.050 --> 02:35.690
So as I've said it only contains some data.

02:35.690 --> 02:41.990
This class doesn't do anything on its own doesn't contain any metals or any business or logic inside

02:41.990 --> 02:42.690
it.

02:42.890 --> 02:47.820
So it's a kind of data holder and well it describes what has happened.

02:48.050 --> 02:52.280
So the name of the event class should be descriptive.

02:52.310 --> 02:58.460
Now you can see that it accepts a user and then stores it on a public field.

02:58.460 --> 03:05.180
It also has this serialize as models trade because you can use that inside the queue and then this will

03:05.180 --> 03:10.440
just serialize the model which means using that BHP serialize function.

03:10.490 --> 03:17.360
So then this model can be read whenever the queue process or which is a different process can read the

03:17.360 --> 03:26.570
data that was stored on an event but let's go back to this register controller and so now you know that

03:26.570 --> 03:34.370
there is an event being dispatched to whenever you register it is actually done explicitly on this very

03:34.370 --> 03:34.910
method.

03:35.090 --> 03:39.420
So this dispatches the registered event.

03:39.590 --> 03:41.520
Now let's go back to our diagram.

03:41.780 --> 03:48.260
So I've said that there are either list in our classes or subscriber classes so we can choose whichever

03:48.260 --> 03:49.790
you'd like to use.

03:49.880 --> 03:56.660
Now there is this sent email verification notification list under which handles the registered class

03:58.340 --> 04:00.320
and let's take a look at it.

04:00.350 --> 04:03.980
So now let's open the event service provider.

04:03.980 --> 04:07.720
This is a class where you will register your events.

04:08.450 --> 04:16.100
So on this class you can see a list and protect that field where you will specify for what event.

04:16.100 --> 04:18.550
What list honors have to be called.

04:18.710 --> 04:21.090
So you can specify multiple of them.

04:21.110 --> 04:27.940
So one event can be handled by many list and there is depending on what logic is inside those least

04:27.940 --> 04:28.450
honors.

04:28.940 --> 04:38.190
So let's open this one now you can see this only has a simple handle method and this handle method accepts

04:38.310 --> 04:46.500
an instance of uneven so you can see this handles only the registered event and it was configured that

04:46.500 --> 04:46.880
way.

04:46.950 --> 04:53.010
So this will know that the handle method of this list listener will receive this event.

04:53.010 --> 04:58.320
Now as we've seen this event has some data which is basically a user.

04:58.680 --> 05:01.880
So now you can read this user from this event and do something.

05:01.890 --> 05:09.570
In this case this is just sending and verification email to the particular user now using events.

05:09.570 --> 05:12.990
You can just decouple your logic from one place.

05:13.200 --> 05:19.860
In this case not everything will happen inside a controller so you won't have to modify a controller

05:20.370 --> 05:27.420
whenever you would like to add some additional logic when for example user is registering inside your

05:27.480 --> 05:29.160
application.

05:29.160 --> 05:37.590
So by simply dispatching this event here we now have possibilities to create some released owners or

05:37.590 --> 05:44.640
subscribers which we'll get to in a couple of lectures and then you can add some additional logic whatever

05:44.640 --> 05:51.630
that might be you might for example call some external API save some additional data inside the database

05:52.110 --> 05:55.830
but whatever you'd like to do now this is much simpler.

05:58.530 --> 06:04.160
So since Lavell is using that well this is also available for us to create.

06:04.190 --> 06:13.180
So we can create our own events and we can also create our custom list owners or subscribers.

06:13.370 --> 06:19.700
So let's take a look at the example we've been working on in the past couple of lectures.

06:19.700 --> 06:24.170
So here we create a new comment on a blog post.

06:24.170 --> 06:30.980
Now what we are doing is we want to send one email to the blog post outdoor and then we dispatch another

06:30.980 --> 06:37.130
job on the queue which is responsible for sending some more emails to other users.

06:37.160 --> 06:44.330
So now let's think of this as well we might add some more logic to this whatever that might be we might

06:44.330 --> 06:52.610
want to cash something or call some external API and then whenever new comment will be created it also

06:52.610 --> 06:56.550
doesn't have to only happen inside this single controller.

06:56.660 --> 07:03.650
It might happen in let's say a different controller for the API or well in the admin panel and then

07:03.920 --> 07:08.150
you would like to also do something when this has happened.

07:08.150 --> 07:15.090
So new comment was added or basically any other thing that might have happened in your application.

07:15.170 --> 07:23.090
So instead of copy pasting the same logic or finding some strange way to handle that the simplest way

07:23.150 --> 07:29.230
is just to dispatch an event and we'll do that in the next lecture we will create this comment posted

07:29.330 --> 07:36.050
event and you will see how we can simply add some list entries that will then do something as a response

07:36.080 --> 07:44.980
that the comment was posted and you will also learn in the next lectures how to create a subscriber.

07:44.990 --> 07:51.170
It's all very simple and actually the concept is also very simple as you can see on this diagram.

07:51.170 --> 07:58.310
This is basically everything that happens so a lot of it is dispatching some events when something happens

07:58.820 --> 08:01.850
so you will know in couple of more lectures.

08:01.910 --> 08:08.210
What are those events and what you can subscribe to using either list and there are subscriber and you

08:08.210 --> 08:10.970
can also create your own events.

08:10.970 --> 08:16.670
So whenever something happens you just dispatch an event and any additional logic required to handle

08:16.820 --> 08:25.190
this event or do some additional stuff can just be a listener or a subscriber and thus you can appreciate

08:25.310 --> 08:27.930
especially if your application grows.

08:28.160 --> 08:34.550
Or you might have a couple of places that do a certain thing like store a comment on the database so

08:34.580 --> 08:41.480
then you will have a simple way of adding something additional that has to happen in response to the

08:41.480 --> 08:46.430
initial event that was that happened in the first place.

08:46.910 --> 08:51.590
So let's see how we can create our own event in the next lecture.
